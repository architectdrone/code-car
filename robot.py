#This module is used by scripts generated by the user's GUI.
import time
import RPi.GPIO as GPIO

#GPIO Globals
IN1 = 12
IN2 = 13
ENA = 6
IN3 = 20
IN4 = 21
ENB = 26

#Setup GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(IN1, GPIO.OUT)
GPIO.setup(IN2, GPIO.OUT)
GPIO.setup(IN3, GPIO.OUT)
GPIO.setup(IN4, GPIO.OUT)

SECONDS_PER_1_ROTATION = 3.2 #We need to do some calibration of this.

def _run(port):
    '''
    PRIVATE: Starts driving power to the given pin.
    @param port The port to drive to.
    '''
    GPIO.output(port, GPIO.HIGH)

def _halt(port):
    '''
    PRIVATE: Stops driving power to the given pin.
    @param port The port to stop driving to.
    '''
    GPIO.output(port, GPIO.LOW)

def _convertRotationsToSeconds(rotations):
    '''
    Converts a number of rotations into seconds, which can be used by the hardware.
    @param rotations Rotations to convert.
    @return Float number of seconds. 
    '''
    global SECONDS_PER_1_ROTATION
    return rotations*SECONDS_PER_1_ROTATION

def forward(rotations):
    '''
    Causes the robot to go forward by the number of rotations specified.
    @param rotations Number of rotations to go forward.
    '''
    raise NotImplementedError

def backward(rotations):
    '''
    Causes the robot to go backward by the number of rotations specified.
    @param rotations Number of rotations to go backward.
    '''
    raise NotImplementedError

def left():
    '''
    Turn left.
    '''
    raise NotImplementedError

def right():
    '''
    Turn right.
    '''
    raise NotImplementedError

def stop(seconds):
    '''
    Stop for a certain number of seconds.
    @param seconds Number of seconds to stop.
    '''
    time.sleep(seconds)